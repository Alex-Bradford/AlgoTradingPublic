import random
from random import shuffle

class Player:
    def __init__(self):
        self.name = ''
        self.hand = []
        self.handKnown = []
        self.handKnownOther = [None,None,None,None]
        
    def handKnownPretty(self, handKnown):
        # call Player().handKnownPretty(playerA.handKnown[:]) to print a pretty version of the hand
        handKnownPretty = []
        handKnownPretty = handKnown
        for index, value in enumerate(handKnownPretty):
            if handKnownPretty[index] == None:
                handKnownPretty[index] = '?'
        x = str(handKnownPretty[0]) + " " + str(handKnownPretty[1]) + " " + str(handKnownPretty[2]) + " " + str(handKnownPretty[3])
        return x
    
    def handKnownLogic(self, handKnown):
        # call Player().handKnownLogic(playerA.handKnown[:]) to print a logic version of the hand
        handKnownPretty = []
        handKnownPretty = handKnown
        for index, value in enumerate(handKnownPretty):
            if handKnownPretty[index] == None:
                handKnownPretty[index] = 5
        x = [handKnownPretty[0],handKnownPretty[1],handKnownPretty[2],handKnownPretty[3]]
        return x

class Game:
    def initialState(self):
            # INITIALISE GAME - GET THE DECK AND HANDS SETUP
        global playerA
        global playerB
        global deck
        global discardPile
        global whosTurn
        playerA = Player()
        playerB = Player()
        deck = [0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,'P','P','P','S','S','S','D','D','D']
        discardPile = '' 
        whosTurn = "Player A"
        shuffle(deck)
        playerA.name = 'Player A'
        playerA.hand = [deck.pop(0), deck.pop(0), deck.pop(0), deck.pop(0)]
        playerA.handKnown = [playerA.hand[0], None, None, playerA.hand[3]]
        playerB.name = 'Player B'
        playerB.hand = [deck.pop(0), deck.pop(0), deck.pop(0), deck.pop(0)]
        playerB.handKnown = [playerB.hand[0], None, None, playerB.hand[3]]
        discardPile = deck.pop(0)
        while (discardPile == 'P' or discardPile == 'S' or discardPile == 'D'):
            deck.append(discardPile)
            discardPile = deck.pop(0)
        print "--Initial State"
        print "Player A hand =",Player().handKnownPretty(playerA.handKnown[:])
        print "Player B hand =",Player().handKnownPretty(playerB.handKnown[:])
        while (playerA.handKnown[0] == 'P' or playerA.handKnown[0] == 'S' or playerA.handKnown[0] == 'D') or (playerA.handKnown[3] == 'P' or playerA.handKnown[3] == 'S' or playerA.handKnown[3] == 'D'):
            for index, value in enumerate(playerA.hand):
                if (index == 0 or index == 3) and (value == 'P' or value == 'S' or value == 'D'):
                    print "Player A swaps",playerA.hand[index],"for next card and puts",playerA.hand[index],"back in deck"
                    deck.append(playerA.hand[index])
                    playerA.hand[index] = deck.pop(0)
                    playerA.handKnown[index] = playerA.hand[index]
                    print "Player A hand =",Player().handKnownPretty(playerA.handKnown[:])
        while (playerB.handKnown[0] == 'P' or playerB.handKnown[0] == 'S' or playerB.handKnown[0] == 'D') or (playerB.handKnown[3] == 'P' or playerB.handKnown[3] == 'S' or playerB.handKnown[3] == 'D'):
            for index, value in enumerate(playerB.hand):
                if (index == 0 or index == 3) and (value == 'P' or value == 'S' or value == 'D'):
                    print "Player B swaps",playerB.hand[index],"for next card and puts",playerB.hand[index],"back in deck"
                    deck.append(playerB.hand[index])
                    playerB.hand[index] = deck.pop(0)
                    playerB.handKnown[index] = playerB.hand[index]
                    print "Player B hand =",Player().handKnownPretty(playerB.handKnown[:])
        print "Discard pile =",discardPile
        return
    
    def play(self):
        print "--Game Begins: Player A starts"
        global counter
        global ratATatCat
        global deck
        counter = 0
        ratATatCat = False
        containsNumeric = False
        while ratATatCat == False:
            Game().turn(whosTurn)
        print "--This is the last turn!"
        Game().turn(whosTurn) #each player gets another turn
        #i = 0
        #while i < 40:
        #    Game().turn(whosTurn)
        #    i = i + 1
        
        #if either hand contains power cards, swap them out for first card on deck
        print "--Player A has the following hand:",playerA.hand[0],playerA.hand[1],playerA.hand[2],playerA.hand[3]
        print "--Player B has the following hand:",playerB.hand[0],playerB.hand[1],playerB.hand[2],playerB.hand[3]
        for index, value in enumerate(playerA.hand):
            if isinstance(playerA.hand[index], (int, long)) == False: 
                playerA.hand[index] = deck.pop(0)
                containsNumeric = True 
        for index, value in enumerate(playerB.hand):
            if isinstance(playerB.hand[index], (int, long)) == False: 
                playerB.hand[index] = deck.pop(0)
                containsNumeric = True
        if containsNumeric == True:
            print "--Players will now replace any power cards"
            print "--Player A now has the following hand:",playerA.hand
            print "--Player B now has the following hand:",playerB.hand        
        
        #sum the player's hands to calculate score
        sumPlayerAHand = sum(playerA.hand)
        sumPlayerBHand = sum(playerB.hand)
        print "Player A has a score of:",sumPlayerAHand
        print "Player B has a score of:",sumPlayerBHand
        if sumPlayerAHand < sumPlayerBHand:
            print "Player A wins!"
        elif sumPlayerBhand < sumPlayerAHand:
            print "Player B wins!"
        else:
            print "It's a tie!"
        return
        
    
    def turn(self, playerTurn):
                global whosTurn #need to update the whosTurn variable
                global discardPile #need to update the discardPile variable
                global deck #need to update the deck variable
                global counter #need to update counter variable
                global ratATatCat #need to update ratATatCat
                
                #assign the object of player who's turn it is
                if playerTurn == 'Player A':
                    player = playerA
                    otherPlayer = playerB
                else:
                    player = playerB
                    otherPlayer = playerA
                    
                #print the turn number
                if (playerTurn == 'Player A') and ratATatCat == 0:
                    counter = counter + 1
                    print "--Turn number:",counter
                    

                #store position of highest known card
                position = player.handKnown.index(max(player.handKnown))

                #drawing from the discard pile if it's less than 5 and the player has unknown cards
                if (discardPile < 5 and None in player.handKnown):
                    print player.name,"draws",discardPile,"from the discard pile and replaces one of their unknown cards"
                    positionHolder = player.handKnown.index(None)
                    player.hand[positionHolder], discardPile = discardPile, player.hand[positionHolder]
                    player.handKnown[positionHolder] = player.hand[positionHolder]
                    print player.name,"discards the unknown card,",discardPile
                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                    
                #drawing from the discard pile if it's less than highest
                elif (discardPile < 5 and None not in player.handKnown and discardPile < player.hand[position]):
                    print player.name,"draws",discardPile,"from the discard pile and replaces",player.hand[position]
                    if (player.hand[position] == 'D') or (player.hand[position] == 'P') or (player.hand[position] == 'S'):
                        otherPlayer.handKnownOther[position] = 5
                        player.hand[position], discardPile = discardPile, player.hand[position]
                        player.handKnown[position] = player.hand[position]
                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                    else:
                        otherPlayer.handKnownOther[position] = player.hand[position] - 1
                        player.hand[position], discardPile = discardPile, player.hand[position]
                        player.handKnown[position] = player.hand[position]
                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])

                #else, draw a card
                else:
                    drawCard = deck.pop(0)
                    print player.name,"draws",drawCard
                    
                    #if the card is less than 5 and the player has unknown cards:
                    if (drawCard < 5 and None in player.handKnown):
                        print player.name,"replaces one of their unknown cards"
                        positionHolder = player.handKnown.index(None)
                        player.hand[positionHolder], drawCard = drawCard, player.hand[positionHolder]
                        player.handKnown[positionHolder] = player.hand[positionHolder]
                        print player.name,"discards the unknown card,",drawCard
                        discardPile = drawCard
                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                    
                    elif (drawCard < player.hand[position] and drawCard != 'P' and drawCard != 'S' and drawCard != 'D'):
                        print player.name,"replaces",player.hand[position],"for",drawCard
                        print player.name,"discards",player.hand[position]
                        if (player.hand[position] == 'D') or (player.hand[position] == 'P') or (player.hand[position] == 'S'):
                            otherPlayer.handKnownOther[position] = 5
                        else:
                            otherPlayer.handKnownOther[position] = player.hand[position] - 1
                        discardPile = player.hand[position]
                        player.hand[position] = drawCard
                        player.handKnown[position] = player.hand[position]
                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                    
                    #if the card is a 'P':
                    elif drawCard == 'P':
                        if player.handKnown[1] == None:
                            player.handKnown[1] = player.hand[1]
                            print player.name,"peeks at their 2nd card"
                            print player.name,"discards",drawCard
                            print player.name,"hand =",Player().handKnownPretty(player.handKnown[:]) 
                        elif (player.handKnown[1] != None) and (player.handKnown[2] == None):
                            player.handKnown[2] = player.hand[2]
                            print player.name,"peeks at their 3rd card"
                            print player.name,"discards",drawCard
                            print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                        else:
                            print player.name,"has no more cards to peek at"
                            print player.name,"discards",drawCard
                            print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                   
                    #if the card is an 'S':
                    elif drawCard == 'S':
                        #each player tracks what they know about the other players hand. If they know the other player has a card 
                        #which is less than their biggest card, they will swap it. Else, they will do nothing.
                        if min(Player().handKnownLogic(player.handKnownOther[:])) < max(player.handKnown):
                            positionOfMin = Player().handKnownLogic(player.handKnownOther[:]).index(min(Player().handKnownLogic(player.handKnownOther[:])))
                            positionOfMax = player.handKnown.index(max(player.handKnown))
                            print player.name,"swaps",player.hand[positionOfMax],"for",otherPlayer.name + "'s card"
                            player.handKnownOther[positionOfMin] = player.hand[positionOfMax]
                            otherPlayer.handKnownOther[positionOfMax] = otherPlayer.hand[positionOfMin]
                            otherPlayer.hand[positionOfMin], player.hand[positionOfMax] = player.hand[positionOfMax], otherPlayer.hand[positionOfMin]
                            player.handKnown[positionOfMax] = player.hand[positionOfMax]
                            otherPlayer.handKnown[positionOfMin] = otherPlayer.hand[positionOfMin]
                            print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                            print otherPlayer.name,"hand =",Player().handKnownPretty(otherPlayer.handKnown[:])
                        elif (min(Player().handKnownLogic(player.handKnownOther[:])) >= max(player.handKnown)) and (None in player.handKnown):
                            positionHolder = player.handKnown.index(None)
                            print player.name,"swaps their position 1 card for their position",positionHolder + 1,"card and discards",drawCard
                            player.hand[0], player.hand[positionHolder] = player.hand[positionHolder], player.hand[0]
                            player.handKnown[positionHolder] = player.hand[positionHolder]
                            player.handKnown[0] = player.hand[0]
                            discardPile = drawCard
                            print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                        else:
                            print player.name,"discards",drawCard
                            discardPile = drawCard  
                    
                    #if the card is a 'D':
                    elif drawCard == 'D':
                        drawCard = deck.pop(0)
                        print player.name,"draws another card,",drawCard
                        if drawCard < player.hand[position]:
                            print player.name,"replaces",player.hand[position],"for",drawCard
                            print player.name,"discards",player.hand[position]
                            if (player.hand[position] == 'D') or (player.hand[position] == 'P') or (player.hand[position] == 'S'):
                                otherPlayer.handKnownOther[position] = 5
                            else:
                                otherPlayer.handKnownOther[position] = player.hand[position] - 1
                            discardPile = player.hand[position]
                            player.hand[position] = drawCard
                            player.handKnown[position] = player.hand[position]
                            print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                        elif drawCard == 'P':
                            if player.handKnown[1] == None:
                                player.handKnown[1] = player.hand[1]
                                print player.name,"peeks at their 2nd card"
                                print player.name,"discards",drawCard
                                print player.name,"hand =",Player().handKnownPretty(player.handKnown[:]) 
                            elif (player.handKnown[1] != None) and (player.handKnown[2] == None):
                                player.handKnown[2] = player.hand[2]
                                print player.name,"peeks at their 3rd card"
                                print player.name,"discards",drawCard
                                print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                            else:
                                print player.name,"has no more cards to peek at"
                                print player.name,"discards",drawCard
                                print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                        elif drawCard == 'S':
                            #each player tracks what they know about the other players hand. If they know the other player has a card 
                            #which is less than their biggest card, they will swap it. Else, they will do nothing.
                            if min(Player().handKnownLogic(player.handKnownOther[:])) < max(player.handKnown):
                                positionOfMin = Player().handKnownLogic(player.handKnownOther[:]).index(min(Player().handKnownLogic(player.handKnownOther[:])))
                                positionOfMax = player.handKnown.index(max(player.handKnown))
                                print player.name,"swaps",player.hand[positionOfMax],"for",otherPlayer.name + "'s card"
                                player.handKnownOther[positionOfMin] = player.hand[positionOfMax]
                                otherPlayer.handKnownOther[positionOfMax] = otherPlayer.hand[positionOfMin]
                                otherPlayer.hand[positionOfMin], player.hand[positionOfMax] = player.hand[positionOfMax], otherPlayer.hand[positionOfMin]
                                player.handKnown[positionOfMax] = player.hand[positionOfMax]
                                otherPlayer.handKnown[positionOfMin] = otherPlayer.hand[positionOfMin]
                                print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                print otherPlayer.name,"hand =",Player().handKnownPretty(otherPlayer.handKnown[:])
                            elif (min(Player().handKnownLogic(player.handKnownOther[:])) >= max(player.handKnown)) and (None in player.handKnown):
                                positionHolder = player.handKnown.index(None)
                                print player.name,"swaps their position 1 card for their position",positionHolder + 1,"card and discards",drawCard
                                player.hand[0], player.hand[positionHolder] = player.hand[positionHolder], player.hand[0]
                                player.handKnown[positionHolder] = player.hand[positionHolder]
                                player.handKnown[0] = player.hand[0]
                                discardPile = drawCard
                            else:
                                print player.name,"discards",drawCard
                                discardPile = drawCard  
                        elif drawCard =='D':
                            drawCard = deck.pop(0)
                            print player.name,"draws another card,",drawCard
                            if drawCard < player.hand[position]:
                                print player.name,"replaces",player.hand[position],"for",drawCard
                                print player.name,"discards",player.hand[position]
                                if (player.hand[position] == 'D') or (player.hand[position] == 'P') or (player.hand[position] == 'S'):
                                    otherPlayer.handKnownOther[position] = 5
                                else:
                                    otherPlayer.handKnownOther[position] = player.hand[position] - 1
                                discardPile = player.hand[position]
                                player.hand[position] = drawCard
                                player.handKnown[position] = player.hand[position]
                                print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                            elif drawCard == 'P':
                                if player.handKnown[1] == None:
                                    player.handKnown[1] = player.hand[1]
                                    print player.name,"peeks at their 2nd card"
                                    print player.name,"discards",drawCard
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:]) 
                                elif (player.handKnown[1] != None) and (player.handKnown[2] == None):
                                    player.handKnown[2] = player.hand[2]
                                    print player.name,"peeks at their 3rd card"
                                    print player.name,"discards",drawCard
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                else:
                                    print player.name,"has no more cards to peek at"
                                    print player.name,"discards",drawCard
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                            elif drawCard == 'S':
                                #each player tracks what they know about the other players hand. If they know the other player has a card 
                                #which is less than their biggest card, they will swap it. Else, they will do nothing.
                                if min(Player().handKnownLogic(player.handKnownOther[:])) < max(player.handKnown):
                                    positionOfMin = Player().handKnownLogic(player.handKnownOther[:]).index(min(Player().handKnownLogic(player.handKnownOther[:])))
                                    positionOfMax = player.handKnown.index(max(player.handKnown))
                                    print player.name,"swaps",player.hand[positionOfMax],"for",otherPlayer.name + "'s card"
                                    player.handKnownOther[positionOfMin] = player.hand[positionOfMax]
                                    otherPlayer.handKnownOther[positionOfMax] = otherPlayer.hand[positionOfMin]
                                    otherPlayer.hand[positionOfMin], player.hand[positionOfMax] = player.hand[positionOfMax], otherPlayer.hand[positionOfMin]
                                    player.handKnown[positionOfMax] = player.hand[positionOfMax]
                                    otherPlayer.handKnown[positionOfMin] = otherPlayer.hand[positionOfMin]
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                    print otherPlayer.name,"hand =",Player().handKnownPretty(otherPlayer.handKnown[:])
                                elif (min(Player().handKnownLogic(player.handKnownOther[:])) >= max(player.handKnown)) and (None in player.handKnown):
                                    positionHolder = player.handKnown.index(None)
                                    print player.name,"swaps their position 1 card for their position",positionHolder + 1,"card and discards",drawCard
                                    player.hand[0], player.hand[positionHolder] = player.hand[positionHolder], player.hand[0]
                                    player.handKnown[positionHolder] = player.hand[positionHolder]
                                    player.handKnown[0] = player.hand[0]
                                    discardPile = drawCard
                                else:
                                    print player.name,"discards",drawCard
                                    discardPile = drawCard  
                            else:
                                print player.name,"discards",drawCard
                                drawCard = deck.pop(0)
                                print player.name,"draws another card,",drawCard
                                if drawCard < player.hand[position]:
                                    print player.name,"replaces",player.hand[position],"for",drawCard
                                    print player.name,"discards",player.hand[position]
                                    if (player.hand[position] == 'D') or (player.hand[position] == 'P') or (player.hand[position] == 'S'):
                                        otherPlayer.handKnownOther[position] = 5
                                    else:
                                        otherPlayer.handKnownOther[position] = player.hand[position] - 1
                                    discardPile = player.hand[position]
                                    player.hand[position] = drawCard
                                    player.handKnown[position] = player.hand[position]
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                elif drawCard == 'P':
                                    if player.handKnown[1] == None:
                                        player.handKnown[1] = player.hand[1]
                                        print player.name,"peeks at their 2nd card"
                                        print player.name,"discards",drawCard
                                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:]) 
                                    elif (player.handKnown[1] != None) and (player.handKnown[2] == None):
                                        player.handKnown[2] = player.hand[2]
                                        print player.name,"peeks at their 3rd card"
                                        print player.name,"discards",drawCard
                                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                    else:
                                        print player.name,"has no more cards to peek at"
                                        print player.name,"discards",drawCard
                                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                elif drawCard == 'S':
                                    #each player tracks what they know about the other players hand. If they know the other player has a card 
                                    #which is less than their biggest card, they will swap it. Else, they will do nothing.
                                    if min(Player().handKnownLogic(player.handKnownOther[:])) < max(player.handKnown):
                                        positionOfMin = Player().handKnownLogic(player.handKnownOther[:]).index(min(Player().handKnownLogic(player.handKnownOther[:])))
                                        positionOfMax = player.handKnown.index(max(player.handKnown))
                                        print player.name,"swaps",player.hand[positionOfMax],"for",otherPlayer.name + "'s card"
                                        player.handKnownOther[positionOfMin] = player.hand[positionOfMax]
                                        otherPlayer.handKnownOther[positionOfMax] = otherPlayer.hand[positionOfMin]
                                        otherPlayer.hand[positionOfMin], player.hand[positionOfMax] = player.hand[positionOfMax], otherPlayer.hand[positionOfMin]
                                        player.handKnown[positionOfMax] = player.hand[positionOfMax]
                                        otherPlayer.handKnown[positionOfMin] = otherPlayer.hand[positionOfMin]
                                        print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                        print otherPlayer.name,"hand =",Player().handKnownPretty(otherPlayer.handKnown[:])
                                    elif (min(Player().handKnownLogic(player.handKnownOther[:])) >= max(player.handKnown)) and (None in player.handKnown):
                                        positionHolder = player.handKnown.index(None)
                                        print player.name,"swaps their position 1 card for their position",positionHolder + 1,"card and discards",drawCard
                                        player.hand[0], player.hand[positionHolder] = player.hand[positionHolder], player.hand[0]
                                        player.handKnown[positionHolder] = player.hand[positionHolder]
                                        player.handKnown[0] = player.hand[0]
                                        discardPile = drawCard
                                    else:
                                        print player.name,"discards",drawCard
                                        discardPile = drawCard  
                                else:
                                    print player.name,"discards",drawCard,"and D"
                                    discardPile = 'D'
                        else:
                            print player.name,"discards",drawCard
                            drawCard = deck.pop(0)
                            print player.name,"draws another card,",drawCard
                            if drawCard < player.hand[position]:
                                print player.name,"replaces",player.hand[position],"for",drawCard
                                print player.name,"discards",player.hand[position]
                                if (player.hand[position] == 'D') or (player.hand[position] == 'P') or (player.hand[position] == 'S'):
                                    otherPlayer.handKnownOther[position] = 5
                                else:
                                    otherPlayer.handKnownOther[position] = player.hand[position] - 1
                                discardPile = player.hand[position]
                                player.hand[position] = drawCard
                                player.handKnown[position] = player.hand[position]
                                print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                            elif drawCard == 'P':
                                if player.handKnown[1] == None:
                                    player.handKnown[1] = player.hand[1]
                                    print player.name,"peeks at their 2nd card"
                                    print player.name,"discards",drawCard
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:]) 
                                elif (player.handKnown[1] != None) and (player.handKnown[2] == None):
                                    player.handKnown[2] = player.hand[2]
                                    print player.name,"peeks at their 3rd card"
                                    print player.name,"discards",drawCard
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                else:
                                    print player.name,"has no more cards to peek at"
                                    print player.name,"discards",drawCard
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                            elif drawCard == 'S':
                                #each player tracks what they know about the other players hand. If they know the other player has a card 
                                #which is less than their biggest card, they will swap it. Else, they will do nothing.
                                if min(Player().handKnownLogic(player.handKnownOther[:])) < max(player.handKnown):
                                    positionOfMin = Player().handKnownLogic(player.handKnownOther[:]).index(min(Player().handKnownLogic(player.handKnownOther[:])))
                                    positionOfMax = player.handKnown.index(max(player.handKnown))
                                    print player.name,"swaps",player.hand[positionOfMax],"for",otherPlayer.name + "'s card"
                                    player.handKnownOther[positionOfMin] = player.hand[positionOfMax]
                                    otherPlayer.handKnownOther[positionOfMax] = otherPlayer.hand[positionOfMin]
                                    otherPlayer.hand[positionOfMin], player.hand[positionOfMax] = player.hand[positionOfMax], otherPlayer.hand[positionOfMin]
                                    player.handKnown[positionOfMax] = player.hand[positionOfMax]
                                    otherPlayer.handKnown[positionOfMin] = otherPlayer.hand[positionOfMin]
                                    print player.name,"hand =",Player().handKnownPretty(player.handKnown[:])
                                    print otherPlayer.name,"hand =",Player().handKnownPretty(otherPlayer.handKnown[:])
                                elif (min(Player().handKnownLogic(player.handKnownOther[:])) >= max(player.handKnown)) and (None in player.handKnown):
                                    positionHolder = player.handKnown.index(None)
                                    print player.name,"swaps their position 1 card for their position",positionHolder + 1,"card and discards",drawCard
                                    player.hand[0], player.hand[positionHolder] = player.hand[positionHolder], player.hand[0]
                                    player.handKnown[positionHolder] = player.hand[positionHolder]
                                    player.handKnown[0] = player.hand[0]
                                    discardPile = drawCard
                                else:
                                    print player.name,"discards",drawCard
                                    discardPile = drawCard  
                            else:
                                print player.name,"discards",drawCard,"and D"
                                discardPile = 'D'           
                    else:
                        print player.name,"discards",drawCard
                        discardPile = drawCard
                
                #should the player call ratATatCat?
                if sum(Player().handKnownLogic(player.handKnown[:])) < 7 and ratATatCat == False:
                    print player.name,"calls rat-a-tat-cat!"
                    ratATatCat = True
                    
                #update whosTurn at the end of the turn
                if playerTurn == "Player A":
                    whosTurn = "Player B"
                elif playerTurn == "Player B":
                    whosTurn = "Player A"
                return

game = Game()
game.initialState()
game.play()
