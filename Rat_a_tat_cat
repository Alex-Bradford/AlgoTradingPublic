import random
from random import shuffle

class Player:
    def __init__(self):
        self.name = ''
        self.hand = []
        self.handKnown = []
        self.handKnownOther = [None,None,None,None]
        
    def handKnownPretty(self, handKnown):
        # Call Player().handKnownPretty(playerA.handKnown[:]) to print a pretty version of the hand
        handKnownPretty = []
        handKnownPretty = handKnown
        for index, value in enumerate(handKnownPretty):
            if handKnownPretty[index] == None:
                handKnownPretty[index] = '?'
        x = str(handKnownPretty[0]) + " " + str(handKnownPretty[1]) + " " + str(handKnownPretty[2]) + " " + str(handKnownPretty[3])
        return x
    
    def handKnownLogic(self, handKnown):
        # Call Player().handKnownLogic(playerA.handKnown[:]) to print a logic version of the hand
        handKnownLogic = []
        handKnownLogic = handKnown
        for index, value in enumerate(handKnownLogic):
            if (handKnownLogic[index] == None) or (isinstance(handKnownLogic[index], (int)) == False):
                handKnownLogic[index] = 5
        x = [handKnownLogic[0],handKnownLogic[1],handKnownLogic[2],handKnownLogic[3]]
        return x

class Game:
    def __init__(self):
        self.playerA = Player()
        self.playerB = Player()
        # The deck has been created like this because it's not 'square'...eg. cards 0-8 have (4), card 9 has (9), cards S,D,P have (3)
        self.deck = [0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,'P','P','P','S','S','S','D','D','D']
        self.discardPile = '' # the value of the card on the discard pile for this game
        self.whosTurn = "Player A" # Player A starts
        self.counter = 0 # Used to track turn numbers
        self.ratATatCat = False # has ratATatCat been called in this game?
        self.player = '' # the player who's turn it is in this game
        self.otherPlayer = '' # the other player in the game
        self.position = '' # the position of the highest card for the current player
        self.drawnCard = '' # the card that drawn from the deck in this game
        self.drawCardUsed = '' # When a 'D' is picked up, was the drawn card used? If not, discard and draw again.
    
    def initialState(self): 
        # Initialise the game - get the deck and players setup
        shuffle(self.deck)
        
        # Define Player A attributes...
        self.playerA.name = 'Player A'
        self.playerA.hand = [self.deck.pop(0), self.deck.pop(0), self.deck.pop(0), self.deck.pop(0)]
        self.playerA.handKnown = [self.playerA.hand[0], None, None, self.playerA.hand[3]]
        # Define Player B attributes...
        self.playerB.name = 'Player B'
        self.playerB.hand = [self.deck.pop(0), self.deck.pop(0), self.deck.pop(0), self.deck.pop(0)]
        self.playerB.handKnown = [self.playerB.hand[0], None, None, self.playerB.hand[3]]
        self.discardPile = self.deck.pop(0)
        
        # Replace the discardPile if it's a power card
        while (isinstance(self.discardPile, (int)) == False):
            self.deck.append(self.discardPile)
            self.discardPile = self.deck.pop(0)
        
        print ("--Initial State")
        print ("Player A hand =",Player().handKnownPretty(self.playerA.handKnown[:]))
        print ("Player B hand =",Player().handKnownPretty(self.playerB.handKnown[:]))
        
        # Replace the 2 outside cards in each player's hand if they are power cards
        isinstance(self.discardPile, (int)) == False
        while (isinstance(self.playerA.handKnown[0], (int)) == False) or (isinstance(self.playerA.handKnown[3], (int)) == False):
            for index, value in enumerate(self.playerA.hand):
                if (index == 0 or index == 3) and (value == 'P' or value == 'S' or value == 'D'):
                    print ("Player A swaps",self.playerA.hand[index],"for next card and puts",self.playerA.hand[index],"back in deck")
                    self.deck.append(self.playerA.hand[index])
                    self.playerA.hand[index] = self.deck.pop(0)
                    self.playerA.handKnown[index] = self.playerA.hand[index]
                    print ("Player A hand =",Player().handKnownPretty(self.playerA.handKnown[:]))
        while (isinstance(self.playerB.handKnown[0], (int)) == False) or (isinstance(self.playerB.handKnown[3], (int)) == False):
            for index, value in enumerate(self.playerB.hand):
                if (index == 0 or index == 3) and (value == 'P' or value == 'S' or value == 'D'):
                    print ("Player B swaps",self.playerB.hand[index],"for next card and puts",self.playerB.hand[index],"back in deck")
                    self.deck.append(self.playerB.hand[index])
                    self.playerB.hand[index] = self.deck.pop(0)
                    self.playerB.handKnown[index] = self.playerB.hand[index]
                    print ("Player B hand =",Player().handKnownPretty(self.playerB.handKnown[:]))
        print ("Discard pile =",self.discardPile)
    
    def play(self):
        # play the game - references the turn() and drawCard() functions
        # Need to update these global variables:
        
        print ("--Game Begins: Player A starts")
        #ratATatCat will be set to True in the turn function when a player thinks they can win
        while self.ratATatCat == False:
            self.turn(self.whosTurn)
        
        # ratATatCat has been called
        print ("--This is the last turn!")
        self.turn(self.whosTurn) #each player gets another turn
        
        # End of game - if either hand contains power cards, swap them out for first card on deck
        containsNumeric = False
        print ("--Player A has the following hand:",self.playerA.hand[0],self.playerA.hand[1],self.playerA.hand[2],self.playerA.hand[3])
        print ("--Player B has the following hand:",self.playerB.hand[0],self.playerB.hand[1],self.playerB.hand[2],self.playerB.hand[3])
        for index, value in enumerate(self.playerA.hand):
            while isinstance(self.playerA.hand[index], (int)) == False: 
                self.playerA.hand[index] = self.deck.pop(0)
                containsNumeric = True 
        for index, value in enumerate(self.playerB.hand):
            while isinstance(self.playerB.hand[index], (int)) == False: 
                self.playerB.hand[index] = self.deck.pop(0)
                containsNumeric = True
        if containsNumeric == True:
            print ("--Players will now replace any power cards")
            print ("--Player A now has the following hand:",self.playerA.hand[0],self.playerA.hand[1],self.playerA.hand[2],self.playerA.hand[3])
            print ("--Player B now has the following hand:",self.playerB.hand[0],self.playerB.hand[1],self.playerB.hand[2],self.playerB.hand[3])
        
        # End of game - sum the player's hands to calculate score and winner
        sumPlayerAHand = sum(self.playerA.hand)
        sumPlayerBHand = sum(self.playerB.hand)
        print ("Player A has a score of:",sumPlayerAHand)
        print ("Player B has a score of:",sumPlayerBHand)
        if sumPlayerAHand < sumPlayerBHand:
            print ("Player A wins!")
        elif sumPlayerBHand < sumPlayerAHand:
            print ("Player B wins!")
        else:
            print ("It's a tie!")
    
    def turn(self, playerTurn):
        # The game contains many turns - keep having turns until somebody calls rat-a-tat-cat!
        
        self.drawCardUsed = False # Set to FALSE at beginning of each turn and used when a player picks up a 'D'
        
        # Assign the object of player who's turn it is
        if playerTurn == 'Player A':
            self.player = self.playerA
            self.otherPlayer = self.playerB
        else:
            self.player = self.playerB
            self.otherPlayer = self.playerA
        # Print the turn number
        if (playerTurn == 'Player A') and self.ratATatCat == False:
            self.counter = self.counter + 1
            print ("--Turn number:",self.counter)
        # Store position of highest known card, ""don't include None or letters -- Did not have this problem in Python 2.""
        self.position = self.player.handKnown.index(max(x for x in self.player.handKnown if x is not None and isinstance(x, (int)) == True))

        # Drawing from the discard pile if it's less than 5 and the player has unknown cards
        if (isinstance(self.discardPile, (int)) == True and self.discardPile < 5) and (None in self.player.handKnown):
            print (self.player.name,"draws",self.discardPile,"from the discard pile and replaces one of their unknown cards")
            positionHolder = self.player.handKnown.index(None)
            self.player.hand[positionHolder], self.discardPile = self.discardPile, self.player.hand[positionHolder]
            self.player.handKnown[positionHolder] = self.player.hand[positionHolder]
            print (self.player.name,"discards the unknown card,",self.discardPile)
            print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))

        # Drawing from the discard pile if it's less than highest
        elif (isinstance(self.discardPile, (int)) == True and self.discardPile < self.player.hand[self.position]):
            print (self.player.name,"draws",self.discardPile,"from the discard pile and replaces",self.player.hand[self.position])
            if (self.player.hand[self.position] == 'D') or (self.player.hand[self.position] == 'P') or (self.player.hand[self.position] == 'S'):
                self.otherPlayer.handKnownOther[self.position] = 5
                self.player.hand[self.position], self.discardPile = self.discardPile, self.player.hand[self.position]
                self.player.handKnown[self.position] = self.player.hand[self.position]
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))
            else:
                self.otherPlayer.handKnownOther[self.position] = self.player.hand[self.position] - 1
                self.player.hand[self.position], self.discardPile = self.discardPile, self.player.hand[self.position]
                self.player.handKnown[self.position] = self.player.hand[self.position]
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))

        # If discardPile is no good (else), draw a card
        else:
            self.drawCard()

        # Should the player call ratATatCat?
        # If the player ever has less than 6, call it
        if (sum(Player().handKnownLogic(self.player.handKnown[:])) < 7) and (self.ratATatCat == False):
            print (self.player.name,"calls rat-a-tat-cat!")
            self.ratATatCat = True
        # If the player ever has less than 14 in the 1st round, call it
        elif (sum(Player().handKnownLogic(self.player.handKnown[:])) < 14) and (self.ratATatCat == False) and (self.counter == 1):
            print (self.player.name,"calls rat-a-tat-cat!")
            self.ratATatCat = True
        # If the player ever has less than 11 in the 2nd round, call it
        elif (sum(Player().handKnownLogic(self.player.handKnown[:])) < 11) and (self.ratATatCat == False) and (self.counter == 2):
            print (self.player.name,"calls rat-a-tat-cat!")
            self.ratATatCat = True
        # If the player ever has less than 9 in the 3rd round, call it
        elif (sum(Player().handKnownLogic(self.player.handKnown[:])) < 9) and (self.ratATatCat == False) and (self.counter == 3):
            print (self.player.name,"calls rat-a-tat-cat!")
            self.ratATatCat = True
        # If the player ever has less than 8 in the 4th round, call it
        elif (sum(Player().handKnownLogic(self.player.handKnown[:])) < 8) and (self.ratATatCat == False) and (self.counter == 4):
            print (self.player.name,"calls rat-a-tat-cat!")
            self.ratATatCat = True

        # Update whosTurn at the end of the turn
        if playerTurn == "Player A":
            self.whosTurn = "Player B"
        elif playerTurn == "Player B":
            self.whosTurn = "Player A"
    
    def drawCard(self):
        # A function for drawing a card is specified to avoid repeated code when a 'D' is picked up
        
        # Player picks up a card
        self.drawnCard = self.deck.pop(0)
        print (self.player.name,"draws",self.drawnCard)
        
        # If the card is not a power, less than 5 and the player has unknown cards, take it:
        if (isinstance(self.drawnCard, (int)) == True and self.drawnCard < 5) and (None in self.player.handKnown):
            print (self.player.name,"replaces one of their unknown cards")
            positionHolder = self.player.handKnown.index(None)
            self.player.hand[positionHolder], self.drawnCard = self.drawnCard, self.player.hand[positionHolder]
            self.player.handKnown[positionHolder] = self.player.hand[positionHolder]
            print (self.player.name,"discards the unknown card,",self.drawnCard)
            self.discardPile = self.drawnCard
            self.drawCardUsed = True
            print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))

        # If the card is less than the player's highest card and not a power card, take it:
        elif (isinstance(self.drawnCard, (int)) == True and self.drawnCard < self.player.hand[self.position]):
            print (self.player.name,"replaces",self.player.hand[self.position],"for",self.drawnCard)
            print (self.player.name,"discards",self.player.hand[self.position])
            # Different information is given to the other player if a number is discarded or a power card is discarded
            if (self.player.hand[self.position] == 'D') or (self.player.hand[self.position] == 'P') or (self.player.hand[self.position] == 'S'):
                self.otherPlayer.handKnownOther[self.position] = 5
            else:
                self.otherPlayer.handKnownOther[self.position] = self.player.hand[self.position] - 1
            self.discardPile = self.player.hand[self.position]
            self.player.hand[self.position] = self.drawnCard
            self.player.handKnown[self.position] = self.player.hand[self.position]
            print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))
            self.drawCardUsed = True
            
        # If the card is a 'P':
        elif self.drawnCard == 'P':
            if self.player.handKnown[1] == None:
                self.player.handKnown[1] = self.player.hand[1]
                print (self.player.name,"peeks at their 2nd card")
                print (self.player.name,"discards",self.drawnCard)
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))
            elif (self.player.handKnown[1] != None) and (self.player.handKnown[2] == None):
                self.player.handKnown[2] = self.player.hand[2]
                print (self.player.name,"peeks at their 3rd card")
                print (self.player.name,"discards",self.drawnCard)
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))
            else:
                print (self.player.name,"has no more cards to peek at")
                print (self.player.name,"discards",self.drawnCard)
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))

        #if the card is an 'S':
        elif self.drawnCard == 'S':
            # Each player tracks what they know about the other players hand, from the cards they each get rid of. If a player picks up an 'S' and they know the other player has a card which is less than their biggest card, they will swap it. If they have some unknown cards, they will swap them to see what they are. Else, they will do nothing. 
            if min(x for x in Player().handKnownLogic(self.player.handKnownOther[:]) if x is not None) < max(x for x in self.player.handKnown if x is not None and isinstance(x, (int)) == True):
                positionOfMin = Player().handKnownLogic(self.player.handKnownOther[:]).index(min(Player().handKnownLogic(self.player.handKnownOther[:])))
                positionOfMax = self.player.handKnown.index(max(x for x in self.player.handKnown if x is not None and isinstance(x, (int)) == True))
                print (self.player.name,"swaps",self.player.hand[positionOfMax],"for",self.otherPlayer.name + "'s card")
                self.player.handKnownOther[positionOfMin] = self.player.hand[positionOfMax]
                self.otherPlayer.handKnownOther[positionOfMax] = self.otherPlayer.hand[positionOfMin]
                self.otherPlayer.hand[positionOfMin], self.player.hand[positionOfMax] = self.player.hand[positionOfMax], self.otherPlayer.hand[positionOfMin]
                self.player.handKnown[positionOfMax] = self.player.hand[positionOfMax]
                self.otherPlayer.handKnown[positionOfMin] = self.otherPlayer.hand[positionOfMin]
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))
                print (self.otherPlayer.name,"hand =",Player().handKnownPretty(self.otherPlayer.handKnown[:]))
            elif (min(x for x in Player().handKnownLogic(self.player.handKnownOther[:]) if x is not None) >= max(x for x in self.player.handKnown if x is not None and isinstance(x, (int)) == True)) and (None in self.player.handKnown):
                positionHolder = self.player.handKnown.index(None)
                print (self.player.name,"swaps their position 1 card for their position",positionHolder + 1,"card and discards",self.drawnCard)
                self.player.hand[0], self.player.hand[positionHolder] = self.player.hand[positionHolder], self.player.hand[0]
                self.player.handKnown[positionHolder] = self.player.hand[positionHolder]
                self.player.handKnown[0] = self.player.hand[0]
                self.discardPile = self.drawnCard
                print (self.player.name,"hand =",Player().handKnownPretty(self.player.handKnown[:]))
            else:
                print (self.player.name,"discards",self.drawnCard)
                self.discardPile = self.drawnCard
        
        # If the card is a 'D'. NOTE: I'm assuming that the the 'D' card is placed on the top of the discard pile at the end of the turn. This means, if somebody discards a '2', this cannot be picked up, as they will end up putting a 'D' on top of it.
        elif self.drawnCard == 'D':
            self.drawCardUsed = False
            print (self.player.name,"draws another card")
            self.drawCard()
            if (self.drawCardUsed != True):
                self.drawCard()
        
        # Else discard it (If the card can't be used and is not a power card)
        else:
            print (self.player.name,"discards",self.drawnCard)
            self.discardPile = self.drawnCard

game = Game()       # New instance of a game
game.initialState() # Call the initital state
game.play()         # Play the game
